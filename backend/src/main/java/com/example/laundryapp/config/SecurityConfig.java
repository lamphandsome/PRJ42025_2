package com.example.laundryapp.config;//import com.example.laundryapp.security.FilterAuthToken;import com.example.laundryapp.service.IAccountService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import java.util.List;@Configuration@EnableWebSecurity@EnableMethodSecuritypublic class SecurityConfig {    @Autowired    private IAccountService accountService;    @Autowired    private FilterAuthToken filterAuthToken;    /**     * Password encoder bean     */    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder(10);    }    /**     * AuthenticationProvider thay cho configure(AuthenticationManagerBuilder)     */    @Bean    public DaoAuthenticationProvider authenticationProvider() {        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();        authProvider.setUserDetailsService(accountService);        authProvider.setPasswordEncoder(passwordEncoder());        return authProvider;    }    /**     * AuthenticationManager bean (thay cho override authenticationManager())     */    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {        return authConfig.getAuthenticationManager();    }    /**     * Cấu hình SecurityFilterChain (thay cho configure(HttpSecurity))     */    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http                .csrf(csrf -> csrf.disable())                .cors(cors -> cors.configurationSource(corsConfigurationSource()))                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))                .authorizeHttpRequests(auth -> auth                                .requestMatchers("/login", "/register").permitAll()//              .requestMatchers("/manages/**").hasRole("ADMIN")                                .anyRequest().authenticated()                )                .authenticationProvider(authenticationProvider())                .addFilterBefore(filterAuthToken, UsernamePasswordAuthenticationFilter.class);        return http.build();    }    @Bean    public CorsConfigurationSource corsConfigurationSource() {        CorsConfiguration configuration = new CorsConfiguration();        configuration.setAllowedOrigins(List.of("http://localhost:3000"));        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"));        configuration.setAllowedHeaders(List.of("*"));        configuration.setExposedHeaders(List.of("*"));        configuration.setAllowCredentials(true);        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", configuration);        return source;    }}